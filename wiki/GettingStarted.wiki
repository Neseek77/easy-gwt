#summary Getting Started Quickly.

=== Setup your development environment ===

  * Download and install Eclipse.
  * Install the Eclipse GWT Plugin.
  * Create a new GWT Project.
  * Download and Configure GXT.
  * Download the latest stable EasyGWT Jar and add it to your project's class path.
  * Add : 

{{{
   <inherits name='com.emitrom.easygwt.wf.EasyGWT'/>
}}}

to your X.gwt.xml.

  * In your GWT project's entry point class, add:

{{{
   public void onModuleLoad() {
	ColumnViewPort columnView = ColumnViewPort.getInstance();
   }
}}}

  * Run your project.

=== Add Navigation items ===

   The Navigation Panel is composed of Parent Items. Each Parent represents an element in an Accordion Layout. Parents are composed consequently of children which will be represented under the parent by an icon and text.

{{{
   List<ColumnNavigationParent> navigationParentsList = new ArrayList<ColumnNavigationParent>();
}}}

   As you would imaginate the List of navigation parents take a parent object as it's argument. See below:

{{{
   ColumnNavigationParent parent1 = new ColumnNavigationParent();
   parent1.setHeading(constants.parentOne());
   parent1.setIcon(AbstractImagePrototype.create(icons.chartBar()));
}}}

   In this case, we've created a Column Navigation Parent instance and set the heading as well as the icon that will be used when the application loads up.

   The next step is to simply add a child instance to the recently created parent. See below:

{{{
   ColumnNavigationChild parent1Child1 = new ColumnNavigationChild(injector.getMyView(), 
      constants.parentOneChildOne());
   parent1Child1.setIcon(icons.house());
   parent1.addNavigationChild(parent1Child1);
}}}

   You have the ability as in the parent case to set a heading as well as an icon for all children.

   Lastly you simply add the list of navigation parents to the column instance obtained initially:

{{{
   columnView.addNavigationItems(navigationParentsList);
}}}

=== Create your first view ===

   A view should extend the abstract class Column View provided by the framework. See below:

{{{
   public class MyView extends ColumnView {

	@Override
	public void onRender() {}

	@Override
	public void prepareToHideView() {}

	@Override
	public void prepareToShowView() {}

   }
}}}

=== Using GIN for dependency injection ===

   The framework does not require the usage of dependency injection, however it is strongly encouraged. The examples provided above used an injector to inject the View into the Navigation Child. See below:


{{{
   ColumnNavigationChild parent1Child1 = new ColumnNavigationChild(injector.getMyView(), 
      constants.parentOneChildOne());
}}}

   Dependency injection can easily be achieved via GIN. For cases where the View requires Custom Widgets, Constants as well as Images and other elements this can be achieved as follows:

{{{
public class MyView extends ColumnView {

	private static final long serialVersionUID = 1L;
	private SampleConstants constants;

	@Inject
	public MyView(SampleConstants constants) {
		this.constants = constants;
	}

   }
}}}

   For more details on how to use GIN, reference the GIN Page at [http://code.google.com/p/google-gin/ GIN]