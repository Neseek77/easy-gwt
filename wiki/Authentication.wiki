#summary Authentication

== Login Dialog ==

A Login Dialog is provided to aid the developer in the process of creating an authentication mechanism. The Login Dialog consists of:

a) A User Name field with a very simple email validator. This validator can be overridden by obtaining access to the field's instance and setting a new one.

b) A password field.

c) Validation is built in and the OK button will not be set to enabled until both User Name and Password fields have been filled out.

d) There are also two additional buttons that are hidden by default containing a "Forgot Password" button as well as a "Sign Up" button.

The LoginDialog's constructor takes an Authenticator interface. See the constructor's signature below:

{{{
public LoginDialog(Authenticator authenticator) {
   ...
}
}}}

=== Authenticator Interface ===

The framework provides an Authenticator interface with the following methods:

{{{
   public void login();
   public void logout();
   public void onSuccess();
}}}

Many implementations can be created to allow users to authenticate and the LoginDialog becomes an easy way to support this.

Let's create a Sample implementation that will act as one of the many possible ways in which the user could authenticate against the system.

{{{

public class SampleLoginAuthenticator implements Authenticator {

   private LoginDialog loginDialog;
	
   public SampleLoginAuthenticator() {
      loginDialog = new LoginDialog(this);
   }
	
   @Override
   public void login() {
		
      String userName = loginDialog.getUsernameTextField().getValue();
      String passWord = loginDialog.getPasswordTextField().getValue();

      /**
        * Here you would typically have a call to a backend service for example (GWT-RPC)
        * or REST request and if successful invoke onSuccess. If not present the user 
        * with a failure message.
        * Simple validation in this case shown below :)
        */		
      if (userName.equals("demo@easy-gwt.com") && passWord.equals("demo")) {
         onSuccess();
      } else {
         loginDialog.getLoginFailureMessageLabelField().setVisible(true);
      }
   }

   @Override
   public void logout() {
      // TODO Auto-generated method stub
   }

   @Override
   public void onSuccess() {
      this.onSuccess();
   }

}

}}}

=== Putting it all together ===

By creating classes that implement the Authenticator interface you can have a wide range of possibilities for Authentication mechanisms. You could implement an LDAP Authenticator for instance or an SSH based Authentication mechanism for example. Both could be combined with the Login Dialog to give you access to an already implemented Login Dialog with the basic buttons needed and built in validation necessary for an enterprise application.

Let's finally combine all the things mentioned above and see what it would look like. In your entry point class for your GWT project you would have something like the following in your *_onModuleLoad()*_

{{{

   /**
   * Authenticate
   */
   new SampleLoginAuthenticator() {

      @Override
      public void onSuccess() {

         /**
           * Column View Sample
           */
         ColumnViewPort columnView = ColumnViewPort.getInstance();
         /**
           * Build your UI, add Navigation items, etc...
           */

      }

   };

}}}